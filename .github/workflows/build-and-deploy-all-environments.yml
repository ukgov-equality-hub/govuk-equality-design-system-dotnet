name: 'Build, Terraform, Deploy (prod)'

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    outputs:
      github_action_run_attempt: ${{ steps.save_github_action_run_attempt.outputs.test }}
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Install Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Install dotnet 8.0.x'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: 'Init Terraform (with no backend)'
        run: |
          terraform init -backend=false
        working-directory: ./terraform

      - name: 'Validate Terraform (with no backend)'
        run: |
          terraform validate
        working-directory: ./terraform

      - name: 'Install .Net (nuget) dependencies'
        run: |
          dotnet restore GovUkDesignSystemDotNet/GovUkDesignSystemDotNet.csproj
          dotnet restore GovUkDesignSystemDotNetDemo/GovUkDesignSystemDotNetDemo.csproj
      
      - name: 'Save build run info to JSON file'
        run: |
          echo '{ "BuildNumber": "${{ github.run_id }}", "git_commit": "${{ github.sha }}", "git_branch": "${{ github.ref_name }}", "github_action_name": "${{ github.workflow }}", "github_action_run_url": "https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}" }' > build-number.json
        working-directory: GovUkDesignSystemDotNetDemo

      - name: 'Update version number of library'
        run: |
          sed -i 's/<Version>\(.*\)<\/Version>/<Version>\1.${{ github.run_number }}<\/Version>/g' GovUkDesignSystemDotNet.csproj
        working-directory: GovUkDesignSystemDotNet

      - name: 'Build .Net code'
        run: |
          dotnet build GovUkDesignSystemDotNetDemo/GovUkDesignSystemDotNetDemo.csproj

      - name: 'Pack .Net code (library)'
        run: |
          dotnet pack --configuration Release --output ./pack-output/
        working-directory: GovUkDesignSystemDotNet

      - name: 'Push library to Nuget.org'
        run: |
          dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        working-directory: GovUkDesignSystemDotNet/pack-output/

      - name: 'Publish .Net code (demo website)'
        run: |
          dotnet publish GovUkDesignSystemDotNetDemo/GovUkDesignSystemDotNetDemo.csproj -p:Configuration=Release

      - name: 'Zip up the code (demo website)'
        run: |
          zip -rq build.zip .
        working-directory: GovUkDesignSystemDotNetDemo/bin/Release/net8.0/publish/

      - name: 'Save build zip as GitHub Actions artifact (demo website)'
        uses: actions/upload-artifact@v4
        with:
          name: build-zip
          path: GovUkDesignSystemDotNetDemo/bin/Release/net8.0/publish/build.zip

      - id: save_github_action_run_attempt
        name: 'Save the GitHub Action run attempt as an output'
        run: |
          echo "test=${{ github.run_attempt }}" >> $GITHUB_OUTPUT

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: [build]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      TERRAFORM_ENVIRONMENT_NAME: prod
      TERRAFORM_STATE_BUCKET: uk-gov-equality-hub-terraform-state-bucket
      TERRAFORM_STATE_FILE: design-system-dot-net.tfstate
      TERRAFORM_TFVARS_FILE: prod.tfvars

    outputs:
      main_app_elastic_beanstalk_application_name: ${{ steps.step_elastic_beanstalk_application_name.outputs.test }}
      main_app_elastic_beanstalk_environment_name: ${{ steps.step_elastic_beanstalk_environment_name.outputs.test }}
      main_app_elastic_beanstalk_code_s3_bucket: ${{ steps.step_elastic_beanstalk_code_s3_bucket.outputs.test }}

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Install Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Init Terraform'
        run: |
          terraform init "-backend-config=bucket=${{ env.TERRAFORM_STATE_BUCKET }}" "-backend-config=key=${{ env.TERRAFORM_STATE_FILE }}" "-backend-config=region=${{ env.AWS_DEFAULT_REGION }}" "-backend-config=access_key=${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}" "-backend-config=secret_key=${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}"
        working-directory: ./terraform

      - name: 'Apply Terraform changes'
        run: |
          terraform apply \
          -var-file "${{ env.TERRAFORM_TFVARS_FILE }}" \
          -var "github_url=https://github.com/${{ github.repository }}" \
          -auto-approve
        working-directory: ./terraform

      - name: 'Download the TFState file'
        run: |
          aws s3 cp "s3://${{ env.TERRAFORM_STATE_BUCKET }}/${{ env.TERRAFORM_STATE_FILE }}" ./current_tf_state.json

      - id: step_elastic_beanstalk_application_name
        name: 'Find the name of the Elastic Beanstalk application name'
        run: |
          echo test=$(jq -r '.resources[] | select(.name == "main_app_elastic_beanstalk_application").instances[].attributes.name' current_tf_state.json) >> main_app_elastic_beanstalk_application_name.txt
          cat main_app_elastic_beanstalk_application_name.txt
          cat main_app_elastic_beanstalk_application_name.txt >> $GITHUB_OUTPUT

      - id: step_elastic_beanstalk_environment_name
        name: 'Find the name of the Elastic Beanstalk environment name'
        run: |
          echo test=$(jq -r '.resources[] | select(.name == "main_app_elastic_beanstalk_environment").instances[].attributes.name' current_tf_state.json) >> main_app_elastic_beanstalk_environment_name.txt
          cat main_app_elastic_beanstalk_environment_name.txt
          cat main_app_elastic_beanstalk_environment_name.txt >> $GITHUB_OUTPUT

      - id: step_elastic_beanstalk_code_s3_bucket
        name: 'Find the name of the Elastic Beanstalk application code versions S3 bucket'
        run: |
          echo test=$(jq -r '.resources[] | select(.name == "main_app_elastic_beanstalk_code_s3_bucket").instances[].attributes.bucket' current_tf_state.json) >> main_app_elastic_beanstalk_code_s3_bucket.txt
          cat main_app_elastic_beanstalk_code_s3_bucket.txt
          cat main_app_elastic_beanstalk_code_s3_bucket.txt >> $GITHUB_OUTPUT

  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    needs: [terraform]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      ZIP_FILE_NAME: "run${{ github.run_id }}_attempt${{ github.run_attempt }}.zip"
      EB_VERSION_LABEL: "v_run${{ github.run_id }}_attempt${{ github.run_attempt }}"
      EB_APP_NAME: ${{ needs.terraform.outputs.main_app_elastic_beanstalk_application_name }}
      EB_ENVIRONMENT_NAME: ${{ needs.terraform.outputs.main_app_elastic_beanstalk_environment_name }}
      EB_CODE_BUCKET: ${{ needs.terraform.outputs.main_app_elastic_beanstalk_code_s3_bucket }}

    steps:
      - name: 'Download build zip from GitHub Actions artifacts'
        uses: actions/download-artifact@v4
        with:
          name: build-zip

      - name: 'Copy the zip file to AWS S3'
        run: |
          aws s3 cp ./build.zip "s3://${{ env.EB_CODE_BUCKET }}/${{ env.ZIP_FILE_NAME }}"

      - name: 'Create Elastic Beanstalk application version'
        run: |
          aws elasticbeanstalk create-application-version --application-name "${{ env.EB_APP_NAME }}" --version-label "${{ env.EB_VERSION_LABEL }}" --source-bundle "S3Bucket=${{ env.EB_CODE_BUCKET }},S3Key=${{ env.ZIP_FILE_NAME }}"

      - name: 'Deploy new version to Elastic Beanstalk instances'
        run: |
          aws elasticbeanstalk update-environment --application-name "${{ env.EB_APP_NAME }}" --environment-name "${{ env.EB_ENVIRONMENT_NAME }}" --version-label "${{ env.EB_VERSION_LABEL }}"

      - name: 'Wait for the Elastic Beanstalk environment to finish updating (to prevent us trying to deploy two changes at once)'
        run: |
          aws elasticbeanstalk wait environment-updated --application-name "${{ env.EB_APP_NAME }}" --environment-name "${{ env.EB_ENVIRONMENT_NAME }}" --version-label "${{ env.EB_VERSION_LABEL }}"
  