@using GovUkDesignSystemDotNet
@using GovUkDesignSystemDotNet.Helpers
@model GovUkDesignSystemDotNet.ButtonViewModel

@{
    // Set classes for this component
    List<string> classNames = ["govuk-button"];
    classNames.AddRange(Model.Classes);
    if (Model.IsStartButton)
    {
        classNames.Add("govuk-button--start");
    }

    // Determine type of element to use, if not explicitly set
    ButtonElementType elementType;
    if (Model.Element.HasValue)
    {
        elementType = Model.Element.Value;
    }
    else if (!string.IsNullOrWhiteSpace(Model.Href))
    {
        elementType = ButtonElementType.A;
    }
    else
    {
        elementType = ButtonElementType.Button;
    }

    Func<object, object> startIcon =
        @<text>
             @* The SVG needs `focusable="false"` so that Internet Explorer does not
             treat it as an interactive element - without this it will be
             'focusable' when using the keyboard to navigate. *@
             <svg class="govuk-button__start-icon" xmlns="http://www.w3.org/2000/svg" width="17.5" height="19" viewBox="0 0 33 40" aria-hidden="true" focusable="false">
                 <path fill="currentColor" d="M0 0h13l20 20-20 20H0l20-20z"/>
             </svg>
         </text>;
}

@switch (elementType)
{
    case ButtonElementType.A:
        <a href="@(!string.IsNullOrWhiteSpace(Model.Href) ? Model.Href : "#")"
           role="button"
           draggable="false"
           class="@(string.Join(" ", classNames))"
           data-module="govuk-button"
           @(Model.Attributes.ToHtmlTagAttributes(Html))
           @{ if (!string.IsNullOrWhiteSpace(Model.Id)) { <text> id="@(Model.Id)" </text> } }
           >
            
            @(Model.HtmlOrText?.Value)

            @if (Model.IsStartButton)
            {
                @(startIcon(new object()))
            }
        </a>
        
        break;
    case ButtonElementType.Button:
        <button value="@(Model.Value)"
                type="@(Model.Type ?? "submit")"
                name="@(Model.Name)"
                @{ if (Model.Disabled) { <text> disabled aria-disabled="true" </text> } }
                @{ if (Model.PreventDoubleClick) { <text> data-prevent-double-click="true" </text> } }
                class="@(string.Join(" ", classNames))"
                data-module="govuk-button"
                @(Model.Attributes.ToHtmlTagAttributes(Html))
                @{ if (!string.IsNullOrWhiteSpace(Model.Id)) { <text> id="@(Model.Id)" </text> } }
                >
        
            @(Model.HtmlOrText?.Value)
        
            @if (Model.IsStartButton)
            {
                @(startIcon(new object()))
            }
        </button>
        
        break;
    case ButtonElementType.Input:
        <input value="@(Model.HtmlOrText?.Text)"
               type="@(Model.Type ?? "submit")"
               name="@(Model.Name)"
               @{ if (Model.Disabled) { <text> disabled aria-disabled="true" </text> } }
               @{ if (Model.PreventDoubleClick) { <text> data-prevent-double-click="true" </text> } }
               class="@(string.Join(" ", classNames))"
               data-module="govuk-button"
               @(Model.Attributes.ToHtmlTagAttributes(Html))
               @{ if (!string.IsNullOrWhiteSpace(Model.Id)) { <text> id="@(Model.Id)" </text> } }
            />
        
        break;
    default:
        throw new ArgumentOutOfRangeException();
}
